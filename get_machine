#! /usr/bin/env bash

echo "checking environment..."

set -o allexport
source .env
set +o allexport

REGION="${REGION:-ams1}" # "ams1" | "mia1" | "hon1"
MEMORY="${MEMORY:-2048}" # 1024 | 2048 | 4096 | 8192
DISK="${DISK:-20}" # 5 | 10 | 20 | 40 | 50

if [ -z $SSH_KEY_PATH ];then
  echo "\$SSH_KEY_PATH undefined. Should be path to ssh private key you want to use on this box"
  exit 1
fi

if [ -z $SSH_KEY_ID ];then
  echo "\$SSH_KEY_ID undefined. Must be one of: {251 (aguestuser), 476 (fdbk), 477 (zy)}"
  exit 1
fi

set -eu # abort with error message if env vars not defined

echo "creating droplet..."
echo "-- region: $REGION"
echo "-- memory: $MEMORY gb"
echo "-- disk:   $DISK gb"

droplet_id=$(bash <<EOF
  curl -X POST \
    --header "Accept: application/json" \
    --header "authorization: $ECLIPSIS_API_KEY" \
    --data "{ \
      \"name\": \"$DROPLET_NAME\", \
      \"region\": \"$REGION\", \
      \"size\": $MEMORY, \
      \"disk\": $DISK, \
      \"image\": 16, \
      \"ssh_keys\": $SSH_KEY_ID \
      }" \
    "https://portal.eclips.is/portal/api/v2/droplet" | jq '.droplet.id'
EOF
)

echo "created droplet with id: $droplet_id"

check_until_running(){
  echo "checking if droplet running..."
  status=$(bash <<EOF
    curl -X GET \
      --header "Accept: application/json" \
      --header "authorization: $ECLIPSIS_API_KEY" \
      "https://portal.eclips.is/portal/api/v2/droplets/$droplet_id" | jq '.droplet.status'
EOF
)
  if [ ${status} != "\"running\"" ];then
    echo "droplet status: $status..."
    check_until_running
  else
    ip_address=$(bash <<EOF
      curl -X GET \
        --header "Accept: application/json" \
        --header "authorization: $ECLIPSIS_API_KEY" \
        "https://portal.eclips.is/portal/api/v2/droplets/$droplet_id" | jq '.droplet.networks.v4 | .[0] | .ip_address'
EOF
)
    echo "droplet running on ip address: $ip_address!"
    sleep 1
  fi
}

echo "waiting for machine to boot..."

check_until_running

echo "creating inventory file..."

cat << EOF > ./inventory
bootstrap:
  hosts:
    ${ip_address}
  vars:
    ansible_user: root
    ansible_ssh_private_key_file: ${SSH_KEY_PATH}
    ansible_ssh_common_args: '-o IdentitiesOnly=yes'
EOF

echo ":):):):):):):):)"
echo ":)   DONE!    :)"
echo ":):):):):):):):)"
